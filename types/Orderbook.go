// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package types

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Orderbook struct {
	_tab flatbuffers.Table
}

func GetRootAsOrderbook(buf []byte, offset flatbuffers.UOffsetT) *Orderbook {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Orderbook{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Orderbook) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Orderbook) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Orderbook) Id() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Orderbook) MutateId(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *Orderbook) Pair() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Orderbook) Bids(obj *Levels) *Levels {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Levels)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Orderbook) Asks(obj *Levels) *Levels {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Levels)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Orderbook) Low() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Orderbook) MutateLow(n float32) bool {
	return rcv._tab.MutateFloat32Slot(12, n)
}

func (rcv *Orderbook) High() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Orderbook) MutateHigh(n float32) bool {
	return rcv._tab.MutateFloat32Slot(14, n)
}

func (rcv *Orderbook) LastPrice() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Orderbook) MutateLastPrice(n float32) bool {
	return rcv._tab.MutateFloat32Slot(16, n)
}

func (rcv *Orderbook) Volume() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Orderbook) MutateVolume(n float32) bool {
	return rcv._tab.MutateFloat32Slot(18, n)
}

func (rcv *Orderbook) Bid() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Orderbook) MutateBid(n float32) bool {
	return rcv._tab.MutateFloat32Slot(20, n)
}

func (rcv *Orderbook) Ask() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Orderbook) MutateAsk(n float32) bool {
	return rcv._tab.MutateFloat32Slot(22, n)
}

func OrderbookStart(builder *flatbuffers.Builder) {
	builder.StartObject(10)
}
func OrderbookAddId(builder *flatbuffers.Builder, Id int32) {
	builder.PrependInt32Slot(0, Id, 0)
}
func OrderbookAddPair(builder *flatbuffers.Builder, Pair flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(Pair), 0)
}
func OrderbookAddBids(builder *flatbuffers.Builder, Bids flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(Bids), 0)
}
func OrderbookAddAsks(builder *flatbuffers.Builder, Asks flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(Asks), 0)
}
func OrderbookAddLow(builder *flatbuffers.Builder, Low float32) {
	builder.PrependFloat32Slot(4, Low, 0.0)
}
func OrderbookAddHigh(builder *flatbuffers.Builder, High float32) {
	builder.PrependFloat32Slot(5, High, 0.0)
}
func OrderbookAddLastPrice(builder *flatbuffers.Builder, LastPrice float32) {
	builder.PrependFloat32Slot(6, LastPrice, 0.0)
}
func OrderbookAddVolume(builder *flatbuffers.Builder, Volume float32) {
	builder.PrependFloat32Slot(7, Volume, 0.0)
}
func OrderbookAddBid(builder *flatbuffers.Builder, Bid float32) {
	builder.PrependFloat32Slot(8, Bid, 0.0)
}
func OrderbookAddAsk(builder *flatbuffers.Builder, Ask float32) {
	builder.PrependFloat32Slot(9, Ask, 0.0)
}
func OrderbookEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
