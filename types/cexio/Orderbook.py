# automatically generated by the FlatBuffers compiler, do not modify

# namespace: types

import flatbuffers

class Orderbook(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsOrderbook(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Orderbook()
        x.Init(buf, n + offset)
        return x

    # Orderbook
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Orderbook
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Orderbook
    def Pair(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Orderbook
    def Bids(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .Levels import Levels
            obj = Levels()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Orderbook
    def Asks(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .Levels import Levels
            obj = Levels()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Orderbook
    def Low(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Orderbook
    def High(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Orderbook
    def LastPrice(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Orderbook
    def Volume(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Orderbook
    def Bid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Orderbook
    def Ask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def OrderbookStart(builder): builder.StartObject(10)
def OrderbookAddId(builder, Id): builder.PrependInt32Slot(0, Id, 0)
def OrderbookAddPair(builder, Pair): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(Pair), 0)
def OrderbookAddBids(builder, Bids): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(Bids), 0)
def OrderbookAddAsks(builder, Asks): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(Asks), 0)
def OrderbookAddLow(builder, Low): builder.PrependFloat32Slot(4, Low, 0.0)
def OrderbookAddHigh(builder, High): builder.PrependFloat32Slot(5, High, 0.0)
def OrderbookAddLastPrice(builder, LastPrice): builder.PrependFloat32Slot(6, LastPrice, 0.0)
def OrderbookAddVolume(builder, Volume): builder.PrependFloat32Slot(7, Volume, 0.0)
def OrderbookAddBid(builder, Bid): builder.PrependFloat32Slot(8, Bid, 0.0)
def OrderbookAddAsk(builder, Ask): builder.PrependFloat32Slot(9, Ask, 0.0)
def OrderbookEnd(builder): return builder.EndObject()
